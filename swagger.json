{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.2",
    "title": "Power Pulse API docs",
    "description": "API documentation for project Power Pulse",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://fitness-for-all-back-end.onrender.com" },
    { "url": "http://localhost:3000" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Product",
      "description": "Product endpoints"
    },
    {
      "name": "Exercise",
      "description": "Exercise endpoints"
    },
    {
      "name": "Diary",
      "description": "Diary endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Description of request parameters: **name** -string, username. **email**-string User's email. **password**-string encrypted password must contain 6 letters in different case and at least one number and be 7 characters long. all fields are mandatory",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Description of the response parameters: **token**-string is used to store the state of user authorization in the system, allows you to make protected requests to the API. The token is an arbitrary string of characters and is generated with each new authorization of the user.., **name**-string im. user's name, **email**-string user's e-mail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "409": {
            "description": "User with such email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Login",
        "parameters": [],
        "requestBody": {
          "description": "Description of request parameters: **email**-string, required, user's e-mail, mandatory parameter. **password**-string, required, encrypted user password, mandatory parameter",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Description of the response parameters: **token**-string is used to store the state of user authorization in the system, allows you to make protected requests to the API. The token is an arbitrary string of characters and is generated with each new authorization of the user.., **email**-string electronic user mail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "description": " The current endpoint is used to retrieve information about the current authorized user. This endpoint returns an object that contains user information such as name, email, user ID, etc. Parameters: None. Description: When a user clicks the logout button, it requests the URL /api/auth/sign-out with a valid token in the Authorization header. The server checks the validity of the token, if the token is valid, the user's session is closed, the token is removed and the user is returned to the login page. If the token is not valid, the server returns a 401 status and reports that the token is invalid.",
        "responses": {
          "200": {
            "description": "A JSON object that contains information about the current authorized user. Description of response parameters: **id** - ObjectId, unique user identifier **name** - string, user name. **email** - string, user's e-mail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Signs out user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "The logout endpoint is a system exit mechanism that terminates the user's session and destroys the access token that was issued during the previous authentication. Description: When a user clicks the logout button, they request the URL /users/logout with a valid token in the Authorization header. The server checks the validity of the token, if the token is valid, the user's session is closed, the token is removed and the user is returned to the login page. If the token is not valid, the server returns a 401 status and reports that the token is invalid.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signs out user"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User signed out - No Content"
          },
          "401": {
            "description": "Bearer auth failed - invalid token - If the request does not contain a valid token or the token has already expired, the server will return a response with HTTP status code 401 Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          }
        }
      }
    },
    "/users/params": {
      "post": {
        "tags": ["User"],
        "summary": "Create User data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Create user's object-data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDataRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, user  data created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update User data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user's object-data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, user data updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products/category": {
      "get": {
        "tags": ["Product"],
        "summary": "Get all products",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Edpoint which returns all existing products in the database"
        },
        "responses": {
          "200": {
            "description": "Returns a list of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProducts"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Get Products list",
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "type": "string",
            "example": "langoustine"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "alcoholic drinks",
                "berries",
                "cereals",
                "dairy",
                "dried fruits",
                "eggs",
                "fish",
                "flour",
                "fruits",
                "meat",
                "mushrooms",
                "nuts",
                "oils and fats",
                "poppy",
                "sausage",
                "seeds",
                "sesame",
                "soft drinks",
                "vegetables and herbs"
              ]
            },
            "description": "Select category for search products"
          },
          {
            "in": "query",
            "name": "recommended",
            "type": "boolean",
            "example": false
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "A private endpoint that returns to the authorized user all the products that are allowed by his blood type to be consumed or, conversely, prohibited."
        },
        "responses": {
          "200": {
            "description": "Returns in response: **groupBloodNotAllowed**- boolean, returns true or false, **_id**- string, unique, **weight**- number, weight of products 100 grams, **calories**- number, calories in 100 grams of product, **title**- string, product name, **category**- string, subcategory of products (fish, nuts, etc.)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCategoryProducts"
                }
              }
            }
          },
          "403": {
            "description": "Not found BodyData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotBodyData"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises": {
      "get": {
        "tags": ["Exercise"],
        "summary": "Get all exercises",
        "parameters": [
          {
            "in": "query",
            "name": "bodyPart",
            "schema": {
              "type": "string",
              "enum": [
                "back",
                "cardio",
                "chest",
                "lower arms",
                "lower legs",
                "neck",
                "shoulders",
                "upper arms",
                "upper legs",
                "waist"
              ]
            },
            "description": "Select body part for search exercises by body part"
          },
          {
            "in": "query",
            "name": "equipment",
            "schema": {
              "type": "string",
              "enum": [
                "body weight",
                "cable",
                "leverage machine",
                "assisted",
                "medicine ball",
                "skierg machine",
                "barbell",
                "band",
                "bosu ball",
                "dumbbell",
                "elliptical machine",
                "ez barbell",
                "hammer",
                "kettlebell",
                "olympic barbell",
                "resistance band",
                "roller",
                "rope",
                "sled machine",
                "smith machine",
                "stability ball",
                "stationary bike",
                "stepmill machine",
                "tire",
                "trap bar",
                "upper body ergometer",
                "weighted",
                "wheel roller"
              ]
            },
            "description": "Select equipment for search exercises by equipment"
          },
          {
            "in": "query",
            "name": "target",
            "schema": {
              "type": "string",
              "enum": [
                "delts",
                "abs",
                "abductors",
                "adductors",
                "biceps",
                "calves",
                "forearms",
                "glutes",
                "hamstrings",
                "cardiovascular",
                "lats",
                "levator scapulae",
                "pectorals",
                "quads",
                "serratus anterior",
                "spine",
                "traps",
                "triceps",
                "upper back"
              ]
            },
            "description": "Select target for search exercises by target"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Edpoint, which returns all existing workouts in the database"
        },
        "responses": {
          "200": {
            "description": "Description of the response parameters: **id** of the user, **bodyPart** - string, the name of the body part for exercises, **equipment**-string the name of the training equipment, **gifUrl** - string url address of the training video, **name**-string training description, **target**-string equipment for training, **burnedCalories**- number the number of calories burned during training, **time** - number training time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTraining"
                }
              }
            }
          },
          "403": {
            "description": "Not found BodyData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotBodyData"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/bodyparts": {
      "get": {
        "tags": ["Exercise"],
        "summary": "Get all body parts",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Edpoint which returns all existing body parts in the database"
        },
        "responses": {
          "200": {
            "description": "Description of the response parameters: **id** of the user, **filter** - string, body parts filtering, **name**-string the name of the body part for training, **imgURL** - string url address to the image of the training in the format jpg ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBodyParts"
                }
              }
            }
          },

          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/muscules": {
      "get": {
        "tags": ["Exercise"],
        "summary": "Get all muscules",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Edpoint which returns all existing Muscles in the database"
        },
        "responses": {
          "200": {
            "description": "Description of the response parameters: **id** of the user, **filter** - string, muscle filtering, **name**-string the name of the muscles, **imgURL** - string url address to the picture of muscle training yams in jpg format ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getMuscle"
                }
              }
            }
          },

          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/equipments": {
      "get": {
        "tags": ["Exercise"],
        "summary": "Get all equipments",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Edpoint which returns all existing equipment in the database"
        },
        "responses": {
          "200": {
            "description": "Description of the response parameters: **id** of the user, **filter** - string, equipment filtering, **name**-string the name of the equipment, **imgURL** - string url address to the image of the device in jpg format ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getEquipments"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/diary/{date}": {
      "get": {
        "tags": ["Diary"],
        "summary": "Get all activities per day. Default is today date",
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Select day",
            "example": "27-09-2023"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "OK. In response, the object on the given day comes, by default today's date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getDayResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Date does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DayDoesntExist"
                }
              }
            }
          }
        }
      }
    },
    "/diary/addProduct": {
      "post": {
        "tags": ["Diary"],
        "summary": "Add product to single day",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Add a product. The date is not required, by default it looks for today's date",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Add Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product is added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIsAdded"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/diary/addExercise": {
      "post": {
        "tags": ["Diary"],
        "summary": "Add exercise to single day",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Add an exercise. The date is not required, by default it looks for today's date",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Add Exercise"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exercise is added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseIsAdded"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/diary/removeProduct": {
      "delete": {
        "tags": ["Diary"],
        "summary": "Remove product to single day by tag",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Delete a product by its tag. The date is not required, by default it looks for today's date",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product is removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIsRemoved"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/diary/removeExercise": {
      "delete": {
        "tags": ["Diary"],
        "summary": "Remove exercise to single day by tag",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Delete an exercise by its tag. The date is not required, by default it looks for today's date",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveExercise"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exercise is removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseIsRemoved"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailed"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignIn": {
        "type": "object",
        "required": ["name", "password", "email"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Mark"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Markqw1"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mark@example.com"
          }
        }
      },
      "SignInDto": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Markqw1"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mark@example.com"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "required": ["user", "token"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7SxrjM"
          },
          "user": {
            "type": "object",
            "description": "User's object",
            "required": ["name", "email"],
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Mark"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["user", "token"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7SxrjM"
          },
          "user": {
            "type": "object",
            "description": "User's object",
            "required": ["email"],
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Bad request"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "description": "User's info",
        "required": [
          "bodyData",
          "_id",
          "name",
          "email",
          "avatarUrl",
          "token",
          "dailyRateCalories",
          "dailySportMin"
        ],
        "properties": {
          "bodyData": {
            "type": "object",
            "description": "User's bodyParameters",
            "required": [
              "height",
              "currentWeight",
              "desiredWeight",
              "birthday",
              "blood",
              "sex",
              "levelActivity"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "description": "User's height",
                "example": 150
              },
              "currentWeight": {
                "type": "integer",
                "description": "User's currentWeight",
                "example": 35
              },
              "desiredWeight": {
                "type": "integer",
                "description": "User's currentWeight",
                "example": 35
              },
              "birthday": {
                "type": "string",
                "description": "User's birthday",
                "example": "2005-06-17T07:27:41.902Z"
              },
              "blood": {
                "type": "integer",
                "description": "User's blood",
                "enum": [1, 2, 3, 4],
                "example": 3
              },
              "sex": {
                "type": "string",
                "description": "User's sex",
                "enum": ["male", "female"],
                "example": "female"
              },
              "levelActivity": {
                "type": "integer",
                "description": "User's levelActivity",
                "enum": [1, 2, 3, 4, 5],
                "example": 2
              }
            }
          },
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "6505c930cd6008416cdfd45f"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Mark"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mark@gmail.com"
          },
          "avatarUrl": {
            "type": "string",
            "description": "User's avatar"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7SxrjM"
          },
          "dailyRateCalories": {
            "type": "integer",
            "description": "User's dailyTime",
            "example": 2200
          },
          "dailySportMin": {
            "type": "integer",
            "description": "User's dailyTime",
            "example": 110
          }
        }
      },
      "AuthenticationFailed": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "Authentication failed. Please log in."
          }
        }
      },
      "ErrorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          }
        }
      },
      "getProducts": {
        "type": "object",
        "properties": {
          "allCategories": {
            "type": "array",
            "description": "Categories array",
            "example": [
              "alcoholic drinks",
              "berries",
              "cereals",
              "dairy",
              "dried fruits",
              "eggs",
              "fish",
              "flour",
              "fruits",
              "meat",
              "mushrooms",
              "nuts",
              "oils and fats",
              "poppy",
              "sausage",
              "seeds",
              "sesame",
              "soft drinks",
              "vegetables and herbs"
            ]
          }
        }
      },
      "getCategoryProducts": {
        "type": "object",
        "properties": {
          "allProducts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupBloodNotAllowed": {
                  "type": "boolean",
                  "example": { "1": false, "2": false, "3": false, "4": false }
                },
                "_id": {
                  "type": "string",
                  "description": "User's id",
                  "example": "5d51694902b2373622ff5b65"
                },
                "weight": {
                  "type": "number",
                  "example": 100
                },
                "calories": {
                  "type": "number",
                  "example": 112
                },
                "category": {
                  "type": "string",
                  "example": "fish"
                },
                "title": {
                  "type": "string",
                  "example": "langoustine"
                }
              }
            }
          }
        }
      },
      "SuccessfulCreateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "User data was created successful"
          }
        }
      },
      "CreateUserDataRequest": {
        "type": "object",
        "required": [
          "height",
          "currentWeight",
          "desiredWeight",
          "birthday",
          "blood",
          "sex",
          "levelActivity",
          "avatar"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "description": "User's height",
            "example": 150
          },
          "currentWeight": {
            "type": "integer",
            "description": "User's currentWeight",
            "example": 35
          },
          "desiredWeight": {
            "type": "integer",
            "description": "User's currentWeight",
            "example": 35
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "2005-06-17T07:27:41.902Z"
          },
          "blood": {
            "type": "integer",
            "description": "User's blood",
            "enum": [1, 2, 3, 4],
            "example": 3
          },
          "sex": {
            "type": "string",
            "description": "User's sex",
            "enum": ["male", "female"],
            "example": "female"
          },
          "levelActivity": {
            "type": "integer",
            "description": "User's levelActivity",
            "enum": [1, 2, 3, 4, 5],
            "example": 2
          },
          "avatar": {
            "type": "file",
            "description": "User's avatar"
          }
        }
      },
      "UpdateUserDataRequest": {
        "type": "object",
        "required": [
          "name",
          "height",
          "currentWeight",
          "desiredWeight",
          "birthday",
          "blood",
          "sex",
          "levelActivity"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Mark"
          },
          "height": {
            "type": "integer",
            "description": "User's height",
            "example": 150
          },
          "currentWeight": {
            "type": "integer",
            "description": "User's currentWeight",
            "example": 35
          },
          "desiredWeight": {
            "type": "integer",
            "description": "User's currentWeight",
            "example": 35
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "2005-06-17T07:27:41.902Z"
          },
          "blood": {
            "type": "integer",
            "description": "User's blood",
            "enum": [1, 2, 3, 4],
            "example": 3
          },
          "sex": {
            "type": "string",
            "description": "User's sex",
            "enum": ["male", "female"],
            "example": "female"
          },
          "levelActivity": {
            "type": "integer",
            "description": "User's levelActivity",
            "enum": [1, 2, 3, 4, 5],
            "example": 2
          },
          "avatar": {
            "type": "file",
            "description": "User's avatar"
          }
        }
      },
      "getTraining": {
        "type": "object",
        "properties": {
          "getExercises": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "bodyPart",
                "equipment",
                "gifUrl",
                "name",
                "target",
                "burnedCalories",
                "time"
              ],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's id",
                  "example": "65053e58a07e502d3e5d703f"
                },
                "bodyPart": {
                  "type": "string",
                  "example": "waist"
                },
                "equipment": {
                  "type": "string",
                  "example": "assisted"
                },
                "gifUrl": {
                  "type": "string",
                  "example": "https://res.cloudinary.com/ditdqzoio/image/upload/v1687127066/exercises/0011.gif"
                },
                "name": {
                  "type": "string",
                  "example": "assisted hanging knee raise"
                },
                "target": {
                  "type": "string",
                  "example": "abs"
                },
                "burnedCalories": {
                  "type": "number",
                  "example": 49
                },
                "time": {
                  "type": "number",
                  "example": 3
                }
              }
            }
          }
        }
      },
      "getBodyParts": {
        "type": "object",
        "properties": {
          "getAllBodyParts": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["_id", "filter", "name", "imgURL"],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's id",
                  "example": "65053e65a07e502d3e5d756d"
                },
                "filter": {
                  "type": "string",
                  "example": "Body parts"
                },
                "name": {
                  "type": "string",
                  "example": "upper legs"
                },
                "imgURL": {
                  "type": "string",
                  "example": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469563/categories/upper_legs_dlkfwx.jpg"
                }
              }
            }
          }
        }
      },
      "getMuscle": {
        "type": "object",
        "properties": {
          "getMuscules": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["_id", "filter", "name", "imgURL"],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's id",
                  "example": "65053e65a07e502d3e5d7591"
                },
                "filter": {
                  "type": "string",
                  "example": "Muscles"
                },
                "name": {
                  "type": "string",
                  "example": "delts"
                },
                "imgURL": {
                  "type": "string",
                  "example": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469568/categories/delts_ui5hy5.jpg"
                }
              }
            }
          }
        }
      },
      "getEquipments": {
        "type": "object",
        "properties": {
          "getEquipments": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["_id", "filter", "name", "imgURL"],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's id",
                  "example": "65053e65a07e502d3e5d7578"
                },
                "filter": {
                  "type": "string",
                  "example": "Equipment"
                },
                "name": {
                  "type": "string",
                  "example": "hammer"
                },
                "imgURL": {
                  "type": "string",
                  "example": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694553685/hammer_rkogqp.jpg"
                }
              }
            }
          }
        }
      },
      "getDayResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "6513d06d66070deb3372acee" },
          "date": {
            "type": "string",
            "description": "today's date or needed date",
            "example": "27-09-2023"
          },
          "owner": {
            "type": "string",
            "description": "User's id",
            "example": "65109b520c56c90080a01b02"
          },
          "exercises": {
            "type": "array",
            "description": "Exercises array",
            "items": {
              "type": "object",
              "required": ["exerciseId", "duration", "calories", "_id"],
              "properties": {
                "exerciseId": {
                  "type": "object",
                  "required": [
                    "_id",
                    "bodyPart",
                    "equipment",
                    "gifUrl",
                    "name",
                    "target",
                    "burnedCalories",
                    "time"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "65106b8c416b44a6d8e1e79b"
                    },
                    "bodyPart": {
                      "type": "string",
                      "example": "waist"
                    },
                    "equipment": {
                      "type": "string",
                      "example": "body weight"
                    },
                    "gifUrl": {
                      "type": "string",
                      "example": "https://res.cloudinary.com/dlxekrww0/image/upload/v1695551944/exercises/0001.gif"
                    },
                    "name": {
                      "type": "string",
                      "example": "3/4 sit-up"
                    },
                    "target": {
                      "type": "string",
                      "example": "abs"
                    },
                    "burnedCalories": {
                      "type": "integer",
                      "example": 220
                    },
                    "time": {
                      "type": "integer",
                      "example": 3
                    }
                  }
                },
                "duration": {
                  "type": "integer",
                  "example": 30
                },
                "calories": {
                  "type": "integer",
                  "example": 1
                },
                "_id": {
                  "type": "string",
                  "example": "6513d06d66070deb3372acf0"
                }
              }
            }
          },
          "products": {
            "type": "array",
            "description": "Products array",
            "items": {
              "type": "object",
              "required": ["productId", "amount", "calories", "_id"],
              "properties": {
                "productId": {
                  "type": "object",
                  "required": [
                    "groupBloodNotAllowed",
                    "_id",
                    "weight",
                    "calories",
                    "category",
                    "title"
                  ],
                  "properties": {
                    "groupBloodNotAllowed": {
                      "type": "boolean",
                      "example": {
                        "1": false,
                        "2": false,
                        "3": false,
                        "4": false
                      }
                    },
                    "_id": {
                      "type": "string",
                      "example": "5d51694902b2373622ff5a68"
                    },
                    "weight": {
                      "type": "integer",
                      "example": 100
                    },
                    "calories": {
                      "type": "integer",
                      "example": 25
                    },
                    "category": {
                      "type": "string",
                      "example": "fish"
                    },
                    "title": {
                      "type": "string",
                      "example": "Algae dals"
                    }
                  }
                },
                "amount": {
                  "type": "integer",
                  "example": 30
                },
                "calories": {
                  "type": "integer",
                  "example": 100
                },
                "_id": {
                  "type": "string",
                  "example": "5d51694902b2373622ff5a68"
                }
              }
            }
          }
        }
      },
      "DayDoesntExist": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Day not found",
            "example": "Day not found"
          }
        }
      },
      "Add Product": {
        "type": "object",
        "required": ["productId", "amount", "calories"],
        "properties": {
          "date": {
            "type": "string",
            "required": false,
            "description": "The default is today's date. Format DD-MM-YYYY",
            "example": "27-09-2023"
          },
          "productId": {
            "type": "string",
            "description": "Product's id",
            "example": "5d51694902b2373622ff5a68"
          },
          "amount": {
            "type ": "integer",
            "example": "30",
            "description": "minimum 1"
          },
          "calories": {
            "type ": "integer",
            "example": "100",
            "description": "minimum 1"
          }
        }
      },
      "Add Exercise": {
        "type": "object",
        "required": ["exerciseId", "duration", "calories"],
        "properties": {
          "date": {
            "type": "string",
            "required": false,
            "description": "The default is today's date. Format DD-MM-YYYY",
            "example": "27-09-2023"
          },
          "exerciseId": {
            "type": "string",
            "description": "Exercise's id",
            "example": "65106b8c416b44a6d8e1e7ab"
          },
          "duration": {
            "type ": "integer",
            "example": "30",
            "description": "minimum 1"
          },
          "calories": {
            "type ": "integer",
            "example": "100",
            "description": "minimum 1"
          }
        }
      },
      "ExerciseIsAdded": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Exercise added to the day 27-09-2023"
          },
          "exerciseId": {
            "type": "string",
            "required": true,
            "example": "65106b8c416b44a6d8e1e7ab"
          }
        }
      },
      "ProductIsAdded": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Product added to the day 27-09-2023"
          },
          "exerciseId": {
            "type": "string",
            "required": true,
            "example": "5d51694902b2373622ff5a68"
          }
        }
      },
      "RemoveProduct": {
        "type": "object",
        "required": ["productToRemove"],
        "properties": {
          "date": {
            "type": "string",
            "required": false,
            "description": "The default is today's date. Format DD-MM-YYYY",
            "example": "27-09-2023"
          },
          "productToRemove": {
            "type": "string",
            "example": "5d51694902b2373622ff5a68"
          }
        }
      },
      "RemoveExercise": {
        "type": "object",
        "required": ["exerciseToRemove"],

        "properties": {
          "date": {
            "type": "string",
            "required": false,
            "description": "The default is today's date. Format DD-MM-YYYY",
            "example": "27-09-2023"
          },
          "exerciseToRemove": {
            "type": "string",
            "example": "65106b8c416b44a6d8e1e7ab"
          }
        }
      },
      "ExerciseIsRemoved": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Exercise removed"
          }
        }
      },
      "ProductIsRemoved": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Product removed"
          }
        }
      },
      "Signs out user": {
        "type": "object"
      },
      "ErrorNotBodyData": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "bodyData absent in user collection"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
